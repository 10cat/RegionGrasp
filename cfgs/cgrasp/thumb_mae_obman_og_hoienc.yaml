project_name: "ConditionHOI_cgrasp"
# dataset settings
dataset: {
  name: obman,

  train: {_base_: ./cfgs/dataset_cfgs/obman_mae.yaml,
          others: {subset: 'train'}},
  val: {_base_: ./cfgs/dataset_cfgs/obman_mae.yaml,
        others: {subset: 'val'}},
  test: {_base_: ./cfgs/dataset_cfgs/obman_mae.yaml,
        others: {subset: 'test'}}}

# training settings
use_mano: False
batch_size: 32
num_epoch: 100
early_stopping: 100
use_cuda: True
optim: {
  cnet_mae: {
    optimizer:  {
      type: AdamW,
      kwargs: {
        lr: 5e-4,
        weight_decay: 0.05
      }
    },
    scheduler: {
      type: CosLR,
      kwargs: {
        epochs: 100,
        initial_epochs: 10
      }
    }
  },

  hand_encoder: { 
    optimizer: {
      type: AdamW,
      kwargs: {
        lr: 1e-3,
        weight_decay : 0.05
      }
    },
    scheduler: {
      type: CosLR,
      kwargs: {
        epochs: 100,
        initial_epochs : 10
    }}
  },

  others: { 
    optimizer: {
      type: Adam,
      kwargs : {
        lr: 1e-4
      }
    },
    scheduler: {
      type: StepLR,
      kwargs: {
        milestones: [30, 60, 80, 90], 
        gamma: 0.5
      }
    }
  },
}

# model settings

model: {
    cnet_type: mae,
    cnet: {
      chkpt_path: 'pointmae_og/models/checkpoint_68.pth',
      kwargs: {
        group_size: 32,
        num_group: 128,
        region_size: 16,
        condition_dim: 1024, # make sure that it's the same with vae.kwargs.condition_size
        transformer: {
          mask_ratio: 0.6,
          mask_type: 'rand',
          trans_dim: 384,
          encoder_dims: 384,
          depth: 12,
          num_heads: 6,
          drop_path_rate: 0.1,
        }
      }
    },
    handenc: {
      chkpt_path: 'pointmae_og/models/checkpoint_68.pth',
      kwargs: {
        group_size: 32,
        num_group: 128,
        region_size: 16,
        out_dim: 1024, # make sure that it's the same with vae.kwargs.condition_size
        transformer: {
          mask_ratio: 0.6,
          mask_type: 'rand',
          trans_dim: 384,
          encoder_dims: 384,
          depth: 6,
          num_heads: 6,
          drop_path_rate: 0.1,
        },
        hoienc: {
          embed_dim: 384,
          depth: 3,
          num_heads: 6,
          drop_path_rate: 0.,
          knn_k: 8,
          knn_layer_num: -1
        }
      }
    },

    vae: {
      kwargs: {
        encoder_sizes: [1024, 512, 256],
        latent_size: 64,
        condition_size: 1024
      } 
    }
      
}
std_type: 'softplus'

# loss settings

loss: {
  train: {
    loss_edge: True,
    loss_mesh_rec: True,
    loss_dist_h: False,
    loss_dist_o: False,
    loss_penetr: False,
    loss_mano: False
  },
  val: {
    loss_edge: True,
    loss_mesh_rec: True,
    loss_dist_h: False,
    loss_dist_o: False,
    loss_penetr: True,
    loss_mano: False
  },
  coef: {
    kl_coef: 0.005,
    lambda_edge: 30.,
    lambda_mesh_rec:  35.,
    lambda_dist_h:  35.,
    lambda_dist_o:  30.,
    lambda_penetr: 0.01,
    lambda_mano: 0.
  }
  
}

hoi_hparams: {
  th_penet: -0.005,
  th_contact: 0.005,
  weight_contact: .1,
  weight_penet: 1.5,
  weight_region: 1.5,
}

vpe_path: "./cfgs/verts_per_edge.npy"
c_weights_path: "./cfgs/rhand_weight.npy"



# checkpoint / visual / 
check_interval: 2
visual_interval: {
  train:{
    batch: 500,
    sample: null
  },
  val: {
    batch: 10,
    sample: null
  }
}


# eval_inference_iteration
eval_iter: 8

# test settings 
test_part: False
test_select_k: 0.25
testmetrics: False
metrics_select : {
  contact: True,
  inter: True,
  simul: False,
  cond: True
}
voxel : {
  mode: voxels_hand,
  pitch: 0.01
}
threshold : {
  penetrate: -0.005,
  cond_dist: -0.005, #CHECK
  coverage: 0.6
}




