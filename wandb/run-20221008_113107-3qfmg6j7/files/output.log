
[Function: __init__ start...]
[Function: __init__ finished, spent time: 2.40562010s]
[Function: __init__ start...]
[Function: __init__ finished, spent time: 0.60996509s]
[Function: __init__ start...]
[Function: __init__ finished, spent time: 0.83262491s]
train epoch:1:   0%|                                                                                                                                                                  | 0/20227 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "traineval.py", line 60, in <module>
    train_val(trainloader, valloader, testloader)
  File "traineval.py", line 22, in train_val
    trainer.epoch(epoch + 1)
  File "/home/datassd/yilin/Codes/Hand/ConditionHOI/epochbase.py", line 215, in epoch
    for idx, sample in enumerate(tqdm(self.dataloader, desc=f'{self.mode} epoch:{epoch}')):
  File "/home/yilin/anaconda3/envs/pytorch3d/lib/python3.8/site-packages/tqdm/std.py", line 1195, in __iter__
    for obj in iterable:
  File "/home/yilin/anaconda3/envs/pytorch3d/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 521, in __next__
    data = self._next_data()
  File "/home/yilin/anaconda3/envs/pytorch3d/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 561, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/yilin/anaconda3/envs/pytorch3d/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 44, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/yilin/anaconda3/envs/pytorch3d/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 44, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/datassd/yilin/Codes/Hand/ConditionHOI/dataset/Dataset.py", line 252, in __getitem__
    data_out['verts_obj'], data_out['region_mask'], data_out['region_centers'], data_out['obj_sdf'] = self.obj_annots_2torch(data_out, idx)
  File "/home/datassd/yilin/Codes/Hand/ConditionHOI/dataset/Dataset.py", line 227, in obj_annots_2torch
    vertices = torch.from_numpy(obj_vertices).float()
TypeError: expected np.ndarray (got Tensor)